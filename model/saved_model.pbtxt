saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "AddN"
        input_arg {
          name: "inputs"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "sum"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_VARIANT
            }
          }
        }
        is_aggregate: true
        is_commutative: true
      }
      op {
        name: "ArgMax"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "dimension"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "output_type"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "output_type"
          type: "type"
          default_value {
            type: DT_INT64
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Assert"
        input_arg {
          name: "condition"
          type: DT_BOOL
        }
        input_arg {
          name: "data"
          type_list_attr: "T"
        }
        attr {
          name: "T"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "summarize"
          type: "int"
          default_value {
            i: 3
          }
        }
        is_stateful: true
      }
      op {
        name: "AssignAddVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        input_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "AssignVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        input_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "BiasAdd"
        input_arg {
          name: "value"
          type_attr: "T"
        }
        input_arg {
          name: "bias"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "data_format"
          type: "string"
          default_value {
            s: "NHWC"
          }
          allowed_values {
            list {
              s: "NHWC"
              s: "NCHW"
            }
          }
        }
      }
      op {
        name: "BiasAddGrad"
        input_arg {
          name: "out_backprop"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "data_format"
          type: "string"
          default_value {
            s: "NHWC"
          }
          allowed_values {
            list {
              s: "NHWC"
              s: "NCHW"
            }
          }
        }
      }
      op {
        name: "BroadcastGradientArgs"
        input_arg {
          name: "s0"
          type_attr: "T"
        }
        input_arg {
          name: "s1"
          type_attr: "T"
        }
        output_arg {
          name: "r0"
          type_attr: "T"
        }
        output_arg {
          name: "r1"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Cast"
        input_arg {
          name: "x"
          type_attr: "SrcT"
        }
        output_arg {
          name: "y"
          type_attr: "DstT"
        }
        attr {
          name: "SrcT"
          type: "type"
        }
        attr {
          name: "DstT"
          type: "type"
        }
        attr {
          name: "Truncate"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "ConcatV2"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        input_arg {
          name: "axis"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 2
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "DenseToDenseSetOperation"
        input_arg {
          name: "set1"
          type_attr: "T"
        }
        input_arg {
          name: "set2"
          type_attr: "T"
        }
        output_arg {
          name: "result_indices"
          type: DT_INT64
        }
        output_arg {
          name: "result_values"
          type_attr: "T"
        }
        output_arg {
          name: "result_shape"
          type: DT_INT64
        }
        attr {
          name: "set_operation"
          type: "string"
        }
        attr {
          name: "validate_indices"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_UINT16
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "Equal"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_QUINT8
              type: DT_QINT8
              type: DT_QINT32
              type: DT_STRING
              type: DT_BOOL
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "ExpandDims"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "dim"
          type_attr: "Tdim"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tdim"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Fill"
        input_arg {
          name: "dims"
          type_attr: "index_type"
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "index_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Floor"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Greater"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "GreaterEqual"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "LessEqual"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "Log"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Max"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Maximum"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Mean"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Merge"
        input_arg {
          name: "inputs"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        output_arg {
          name: "value_index"
          type: DT_INT32
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
        is_stateful: true
      }
      op {
        name: "Minimum"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Neg"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "PlaceholderWithDefault"
        input_arg {
          name: "input"
          type_attr: "dtype"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
      }
      op {
        name: "Pow"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_HALF
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "PreventGradient"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "message"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "RandomUniform"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "ReadVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "RealDiv"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Reciprocal"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Relu"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "activations"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_QINT8
            }
          }
        }
      }
      op {
        name: "ReluGrad"
        input_arg {
          name: "gradients"
          type_attr: "T"
        }
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "backprops"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "Select"
        input_arg {
          name: "condition"
          type: DT_BOOL
        }
        input_arg {
          name: "t"
          type_attr: "T"
        }
        input_arg {
          name: "e"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Size"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Softmax"
        input_arg {
          name: "logits"
          type_attr: "T"
        }
        output_arg {
          name: "softmax"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "SparseSoftmaxCrossEntropyWithLogits"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        input_arg {
          name: "labels"
          type_attr: "Tlabels"
        }
        output_arg {
          name: "loss"
          type_attr: "T"
        }
        output_arg {
          name: "backprop"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "Tlabels"
          type: "type"
          default_value {
            type: DT_INT64
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Sqrt"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Square"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "StridedSlice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "end"
          type_attr: "Index"
        }
        input_arg {
          name: "strides"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "begin_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "end_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "ellipsis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "new_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "shrink_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Sum"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Switch"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        input_arg {
          name: "pred"
          type: DT_BOOL
        }
        output_arg {
          name: "output_false"
          type_attr: "T"
        }
        output_arg {
          name: "output_true"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Tile"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "multiples"
          type_attr: "Tmultiples"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tmultiples"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "VarHandleOp"
        output_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
        is_stateful: true
      }
      op {
        name: "VarIsInitializedOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "is_initialized"
          type: DT_BOOL
        }
        is_stateful: true
      }
      op {
        name: "ZerosLike"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
    }
    tags: "serve"
    tensorflow_version: "1.12.0"
    tensorflow_git_version: "v1.12.0-0-ga6d8ffae09"
  }
  graph_def {
    node {
      name: "input_tensor"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 28
              }
              dim {
                size: 28
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 28
            }
            dim {
              size: 28
            }
          }
        }
      }
    }
    node {
      name: "flatten/Shape"
      op: "Shape"
      input: "input_tensor"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "flatten/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "flatten/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "flatten/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "flatten/strided_slice"
      op: "StridedSlice"
      input: "flatten/Shape"
      input: "flatten/strided_slice/stack"
      input: "flatten/strided_slice/stack_1"
      input: "flatten/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "flatten/Reshape/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "flatten/Reshape/shape"
      op: "Pack"
      input: "flatten/strided_slice"
      input: "flatten/Reshape/shape/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "flatten/Reshape"
      op: "Reshape"
      input: "input_tensor"
      input: "flatten/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 784
              }
            }
          }
        }
      }
    }
    node {
      name: "dense1/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\020\003\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "dense1/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.06804138422012329
          }
        }
      }
    }
    node {
      name: "dense1/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.06804138422012329
          }
        }
      }
    }
    node {
      name: "dense1/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dense1/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dense1/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "dense1/kernel/Initializer/random_uniform/max"
      input: "dense1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dense1/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "dense1/kernel/Initializer/random_uniform/RandomUniform"
      input: "dense1/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dense1/kernel/Initializer/random_uniform"
      op: "Add"
      input: "dense1/kernel/Initializer/random_uniform/mul"
      input: "dense1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dense1/kernel"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "dense1/kernel"
        }
      }
    }
    node {
      name: "dense1/kernel/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "dense1/kernel"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dense1/kernel/Assign"
      op: "AssignVariableOp"
      input: "dense1/kernel"
      input: "dense1/kernel/Initializer/random_uniform"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/kernel"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "dense1/kernel/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense1/kernel"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "dense1/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 512
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dense1/bias"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "dense1/bias"
        }
      }
    }
    node {
      name: "dense1/bias/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "dense1/bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dense1/bias/Assign"
      op: "AssignVariableOp"
      input: "dense1/bias"
      input: "dense1/bias/Initializer/zeros"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/bias"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "dense1/bias/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense1/bias"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "dense1/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense1/kernel"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "dense1/MatMul"
      op: "MatMul"
      input: "flatten/Reshape"
      input: "dense1/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "dense1/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "dense1/bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "dense1/BiasAdd"
      op: "BiasAdd"
      input: "dense1/MatMul"
      input: "dense1/BiasAdd/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "dense1/Relu"
      op: "Relu"
      input: "dense1/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dropout/keras_learning_phase/input"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node {
      name: "dropout/keras_learning_phase"
      op: "PlaceholderWithDefault"
      input: "dropout/keras_learning_phase/input"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "dropout/cond/Switch"
      op: "Switch"
      input: "dropout/keras_learning_phase"
      input: "dropout/keras_learning_phase"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/switch_t"
      op: "Identity"
      input: "dropout/cond/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/switch_f"
      op: "Identity"
      input: "dropout/cond/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/pred_id"
      op: "Identity"
      input: "dropout/keras_learning_phase"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/dropout/keep_prob"
      op: "Const"
      input: "^dropout/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.800000011920929
          }
        }
      }
    }
    node {
      name: "dropout/cond/dropout/Shape"
      op: "Shape"
      input: "dropout/cond/dropout/Shape/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dropout/cond/dropout/Shape/Switch"
      op: "Switch"
      input: "dense1/Relu"
      input: "dropout/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/dropout/random_uniform/min"
      op: "Const"
      input: "^dropout/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dropout/cond/dropout/random_uniform/max"
      op: "Const"
      input: "^dropout/cond/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "dropout/cond/dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/cond/dropout/Shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dropout/cond/dropout/random_uniform/sub"
      op: "Sub"
      input: "dropout/cond/dropout/random_uniform/max"
      input: "dropout/cond/dropout/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/dropout/random_uniform/mul"
      op: "Mul"
      input: "dropout/cond/dropout/random_uniform/RandomUniform"
      input: "dropout/cond/dropout/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/dropout/random_uniform"
      op: "Add"
      input: "dropout/cond/dropout/random_uniform/mul"
      input: "dropout/cond/dropout/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/dropout/add"
      op: "Add"
      input: "dropout/cond/dropout/keep_prob"
      input: "dropout/cond/dropout/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/dropout/Floor"
      op: "Floor"
      input: "dropout/cond/dropout/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/dropout/div"
      op: "RealDiv"
      input: "dropout/cond/dropout/Shape/Switch:1"
      input: "dropout/cond/dropout/keep_prob"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/dropout/mul"
      op: "Mul"
      input: "dropout/cond/dropout/div"
      input: "dropout/cond/dropout/Floor"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/Identity"
      op: "Identity"
      input: "dropout/cond/Identity/Switch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/Identity/Switch"
      op: "Switch"
      input: "dense1/Relu"
      input: "dropout/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "dropout/cond/Merge"
      op: "Merge"
      input: "dropout/cond/Identity"
      input: "dropout/cond/dropout/mul"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "output_layer/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\002\000\000\n\000\000\000"
          }
        }
      }
    }
    node {
      name: "output_layer/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10721125453710556
          }
        }
      }
    }
    node {
      name: "output_layer/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10721125453710556
          }
        }
      }
    }
    node {
      name: "output_layer/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "output_layer/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "output_layer/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "output_layer/kernel/Initializer/random_uniform/max"
      input: "output_layer/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "output_layer/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "output_layer/kernel/Initializer/random_uniform/RandomUniform"
      input: "output_layer/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "output_layer/kernel/Initializer/random_uniform"
      op: "Add"
      input: "output_layer/kernel/Initializer/random_uniform/mul"
      input: "output_layer/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "output_layer/kernel"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "output_layer/kernel"
        }
      }
    }
    node {
      name: "output_layer/kernel/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "output_layer/kernel"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "output_layer/kernel/Assign"
      op: "AssignVariableOp"
      input: "output_layer/kernel"
      input: "output_layer/kernel/Initializer/random_uniform"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/kernel"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "output_layer/kernel/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "output_layer/kernel"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "output_layer/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 10
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "output_layer/bias"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "output_layer/bias"
        }
      }
    }
    node {
      name: "output_layer/bias/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "output_layer/bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "output_layer/bias/Assign"
      op: "AssignVariableOp"
      input: "output_layer/bias"
      input: "output_layer/bias/Initializer/zeros"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/bias"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "output_layer/bias/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "output_layer/bias"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "output_layer/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "output_layer/kernel"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "output_layer/MatMul"
      op: "MatMul"
      input: "dropout/cond/Merge"
      input: "output_layer/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "output_layer/BiasAdd/ReadVariableOp"
      op: "ReadVariableOp"
      input: "output_layer/bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "output_layer/BiasAdd"
      op: "BiasAdd"
      input: "output_layer/MatMul"
      input: "output_layer/BiasAdd/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "output_layer/Softmax"
      op: "Softmax"
      input: "output_layer/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "Adam/iterations/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/iterations"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node {
      name: "Adam/iterations"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/iterations"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "Adam/iterations"
        }
      }
    }
    node {
      name: "Adam/iterations/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "Adam/iterations"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Adam/iterations/Assign"
      op: "AssignVariableOp"
      input: "Adam/iterations"
      input: "Adam/iterations/Initializer/initial_value"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/iterations"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "Adam/iterations/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "Adam/iterations"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/iterations"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "Adam/lr/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/lr"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0010000000474974513
          }
        }
      }
    }
    node {
      name: "Adam/lr"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/lr"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "Adam/lr"
        }
      }
    }
    node {
      name: "Adam/lr/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "Adam/lr"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Adam/lr/Assign"
      op: "AssignVariableOp"
      input: "Adam/lr"
      input: "Adam/lr/Initializer/initial_value"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/lr"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/lr/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "Adam/lr"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/lr"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/beta_1/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/beta_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "Adam/beta_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/beta_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "Adam/beta_1"
        }
      }
    }
    node {
      name: "Adam/beta_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "Adam/beta_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Adam/beta_1/Assign"
      op: "AssignVariableOp"
      input: "Adam/beta_1"
      input: "Adam/beta_1/Initializer/initial_value"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/beta_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/beta_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "Adam/beta_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/beta_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/beta_2/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/beta_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "Adam/beta_2"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/beta_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "Adam/beta_2"
        }
      }
    }
    node {
      name: "Adam/beta_2/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "Adam/beta_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Adam/beta_2/Assign"
      op: "AssignVariableOp"
      input: "Adam/beta_2"
      input: "Adam/beta_2/Initializer/initial_value"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/beta_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/beta_2/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "Adam/beta_2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/beta_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/decay/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/decay"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "Adam/decay"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/decay"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "Adam/decay"
        }
      }
    }
    node {
      name: "Adam/decay/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "Adam/decay"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Adam/decay/Assign"
      op: "AssignVariableOp"
      input: "Adam/decay"
      input: "Adam/decay/Initializer/initial_value"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/decay"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/decay/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "Adam/decay"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Adam/decay"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "output_layer_target"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: -1
            }
          }
        }
      }
    }
    node {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "output_layer_sample_weights"
      op: "PlaceholderWithDefault"
      input: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0000000116860974e-07
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/sub/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/sub"
      op: "Sub"
      input: "loss/output_layer_loss/sub/x"
      input: "loss/output_layer_loss/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/clip_by_value/Minimum"
      op: "Minimum"
      input: "output_layer/Softmax"
      input: "loss/output_layer_loss/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/clip_by_value"
      op: "Maximum"
      input: "loss/output_layer_loss/clip_by_value/Minimum"
      input: "loss/output_layer_loss/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Log"
      op: "Log"
      input: "loss/output_layer_loss/clip_by_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Reshape"
      op: "Reshape"
      input: "output_layer_target"
      input: "loss/output_layer_loss/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Cast"
      op: "Cast"
      input: "loss/output_layer_loss/Reshape"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\n\000\000\000"
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Reshape_1"
      op: "Reshape"
      input: "loss/output_layer_loss/Log"
      input: "loss/output_layer_loss/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/Shape"
      op: "Shape"
      input: "loss/output_layer_loss/Cast"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      op: "SparseSoftmaxCrossEntropyWithLogits"
      input: "loss/output_layer_loss/Reshape_1"
      input: "loss/output_layer_loss/Cast"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tlabels"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/shape"
      op: "Shape"
      input: "output_layer_sample_weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/values/shape"
      op: "Shape"
      input: "loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/values/rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar"
      op: "Equal"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar/x"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Switch"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/switch_t"
      op: "Identity"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/switch_f"
      op: "Identity"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
      op: "Identity"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/values/rank"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/values/rank"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/rank"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/rank"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
      op: "Identity"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_f"
      op: "Identity"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
      op: "Identity"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1:1"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/values/shape"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/values/shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/values/shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1:1"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/shape"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
      op: "Merge"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
      op: "Merge"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "output_layer_sample_weights:0"
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/Const_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:0"
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/Const_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Switch"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
      op: "Identity"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
      op: "Identity"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
      op: "Identity"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/NoOp"
      op: "NoOp"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency"
      op: "Identity"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_0"
      op: "Const"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_1"
      op: "Const"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_2"
      op: "Const"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "output_layer_sample_weights:0"
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_4"
      op: "Const"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_5"
      op: "Const"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:0"
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_7"
      op: "Const"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert"
      op: "Assert"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_0"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_1"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_2"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_4"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_5"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_7"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/shape"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/values/shape"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/values/shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3"
      op: "Switch"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency_1"
      op: "Identity"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
      op: "Merge"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency_1"
      input: "loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/ones_like/Shape"
      op: "Shape"
      input: "loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/ones_like/Const"
      op: "Const"
      input: "^loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights/ones_like"
      op: "Fill"
      input: "loss/output_layer_loss/broadcast_weights/ones_like/Shape"
      input: "loss/output_layer_loss/broadcast_weights/ones_like/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "loss/output_layer_loss/broadcast_weights"
      op: "Mul"
      input: "output_layer_sample_weights"
      input: "loss/output_layer_loss/broadcast_weights/ones_like"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Mul"
      op: "Mul"
      input: "loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      input: "loss/output_layer_loss/broadcast_weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Sum"
      op: "Sum"
      input: "loss/output_layer_loss/Mul"
      input: "loss/output_layer_loss/Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Sum_1"
      op: "Sum"
      input: "loss/output_layer_loss/broadcast_weights"
      input: "loss/output_layer_loss/Const_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/output_layer_loss/truediv"
      op: "RealDiv"
      input: "loss/output_layer_loss/Sum"
      input: "loss/output_layer_loss/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/zeros_like"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Greater"
      op: "Greater"
      input: "loss/output_layer_loss/Sum_1"
      input: "loss/output_layer_loss/zeros_like"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Select"
      op: "Select"
      input: "loss/output_layer_loss/Greater"
      input: "loss/output_layer_loss/truediv"
      input: "loss/output_layer_loss/zeros_like"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "loss/output_layer_loss/Mean"
      op: "Mean"
      input: "loss/output_layer_loss/Select"
      input: "loss/output_layer_loss/Const_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "loss/mul/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "loss/mul"
      op: "Mul"
      input: "loss/mul/x"
      input: "loss/output_layer_loss/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "metrics/acc/Max/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "metrics/acc/Max"
      op: "Max"
      input: "output_layer_target"
      input: "metrics/acc/Max/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "metrics/acc/ArgMax/dimension"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "metrics/acc/ArgMax"
      op: "ArgMax"
      input: "output_layer/Softmax"
      input: "metrics/acc/ArgMax/dimension"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_type"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "metrics/acc/Cast"
      op: "Cast"
      input: "metrics/acc/ArgMax"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "metrics/acc/Equal"
      op: "Equal"
      input: "metrics/acc/Max"
      input: "metrics/acc/Cast"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "metrics/acc/Cast_1"
      op: "Cast"
      input: "metrics/acc/Equal"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "metrics/acc/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "metrics/acc/Mean"
      op: "Mean"
      input: "metrics/acc/Cast_1"
      input: "metrics/acc/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/Shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/grad_ys_0"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/Fill"
      op: "Fill"
      input: "training/Adam/gradients/Shape"
      input: "training/Adam/gradients/grad_ys_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/mul_grad/Mul"
      op: "Mul"
      input: "training/Adam/gradients/Fill"
      input: "loss/output_layer_loss/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/mul_grad/Mul_1"
      op: "Mul"
      input: "training/Adam/gradients/Fill"
      input: "loss/mul/x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mean_grad/Reshape/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mean_grad/Reshape"
      op: "Reshape"
      input: "training/Adam/gradients/loss/mul_grad/Mul_1"
      input: "training/Adam/gradients/loss/output_layer_loss/Mean_grad/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mean_grad/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mean_grad/Tile"
      op: "Tile"
      input: "training/Adam/gradients/loss/output_layer_loss/Mean_grad/Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/Mean_grad/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mean_grad/Const_1"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mean_grad/truediv"
      op: "RealDiv"
      input: "training/Adam/gradients/loss/output_layer_loss/Mean_grad/Tile"
      input: "training/Adam/gradients/loss/output_layer_loss/Mean_grad/Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mean"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Select_grad/zeros_like"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Select"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Select_grad/Select"
      op: "Select"
      input: "loss/output_layer_loss/Greater"
      input: "training/Adam/gradients/loss/output_layer_loss/Mean_grad/truediv"
      input: "training/Adam/gradients/loss/output_layer_loss/Select_grad/zeros_like"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Select"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Select_grad/Select_1"
      op: "Select"
      input: "loss/output_layer_loss/Greater"
      input: "training/Adam/gradients/loss/output_layer_loss/Select_grad/zeros_like"
      input: "training/Adam/gradients/loss/output_layer_loss/Mean_grad/truediv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Select"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/truediv"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Shape_1"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/truediv"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Shape"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/truediv"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/RealDiv"
      op: "RealDiv"
      input: "training/Adam/gradients/loss/output_layer_loss/Select_grad/Select"
      input: "loss/output_layer_loss/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/truediv"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Sum"
      op: "Sum"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/RealDiv"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/truediv"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Reshape"
      op: "Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Sum"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/truediv"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Neg"
      op: "Neg"
      input: "loss/output_layer_loss/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/truediv"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/RealDiv_1"
      op: "RealDiv"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Neg"
      input: "loss/output_layer_loss/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/truediv"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/RealDiv_2"
      op: "RealDiv"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/RealDiv_1"
      input: "loss/output_layer_loss/Sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/truediv"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/mul"
      op: "Mul"
      input: "training/Adam/gradients/loss/output_layer_loss/Select_grad/Select"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/RealDiv_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/truediv"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Sum_1"
      op: "Sum"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/mul"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/truediv"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Reshape_1"
      op: "Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Sum_1"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/truediv"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Sum_grad/Reshape/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Sum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Sum_grad/Reshape"
      op: "Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/truediv_grad/Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/Sum_grad/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Sum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Sum_grad/Shape"
      op: "Shape"
      input: "loss/output_layer_loss/Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Sum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Sum_grad/Tile"
      op: "Tile"
      input: "training/Adam/gradients/loss/output_layer_loss/Sum_grad/Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/Sum_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Sum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Shape"
      op: "Shape"
      input: "loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Shape_1"
      op: "Shape"
      input: "loss/output_layer_loss/broadcast_weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Shape"
      input: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Mul"
      op: "Mul"
      input: "training/Adam/gradients/loss/output_layer_loss/Sum_grad/Tile"
      input: "loss/output_layer_loss/broadcast_weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Sum"
      op: "Sum"
      input: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Mul"
      input: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Reshape"
      op: "Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Sum"
      input: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Mul_1"
      op: "Mul"
      input: "loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
      input: "training/Adam/gradients/loss/output_layer_loss/Sum_grad/Tile"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Sum_1"
      op: "Sum"
      input: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Mul_1"
      input: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Reshape_1"
      op: "Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Sum_1"
      input: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/zeros_like"
      op: "ZerosLike"
      input: "loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
      op: "PreventGradient"
      input: "loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "message"
        value {
          s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
      op: "ExpandDims"
      input: "training/Adam/gradients/loss/output_layer_loss/Mul_grad/Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
      op: "Mul"
      input: "training/Adam/gradients/loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
      input: "training/Adam/gradients/loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Reshape_1_grad/Shape"
      op: "Shape"
      input: "loss/output_layer_loss/Log"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Reshape_1_grad/Reshape"
      op: "Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
      input: "training/Adam/gradients/loss/output_layer_loss/Reshape_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Log_grad/Reciprocal"
      op: "Reciprocal"
      input: "loss/output_layer_loss/clip_by_value"
      input: "^training/Adam/gradients/loss/output_layer_loss/Reshape_1_grad/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Log"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/Log_grad/mul"
      op: "Mul"
      input: "training/Adam/gradients/loss/output_layer_loss/Reshape_1_grad/Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/Log_grad/Reciprocal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/Log"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Shape"
      op: "Shape"
      input: "loss/output_layer_loss/clip_by_value/Minimum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Shape_1"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Shape_2"
      op: "Shape"
      input: "training/Adam/gradients/loss/output_layer_loss/Log_grad/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/zeros"
      op: "Fill"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Shape_2"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/GreaterEqual"
      op: "GreaterEqual"
      input: "loss/output_layer_loss/clip_by_value/Minimum"
      input: "loss/output_layer_loss/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Shape"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Select"
      op: "Select"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/GreaterEqual"
      input: "training/Adam/gradients/loss/output_layer_loss/Log_grad/mul"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Select_1"
      op: "Select"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/GreaterEqual"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/zeros"
      input: "training/Adam/gradients/loss/output_layer_loss/Log_grad/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Sum"
      op: "Sum"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Select"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Reshape"
      op: "Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Sum"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Sum_1"
      op: "Sum"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Select_1"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Reshape_1"
      op: "Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Sum_1"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Shape"
      op: "Shape"
      input: "output_layer/Softmax"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value/Minimum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Shape_1"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value/Minimum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Shape_2"
      op: "Shape"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value/Minimum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value/Minimum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/zeros"
      op: "Fill"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Shape_2"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value/Minimum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/LessEqual"
      op: "LessEqual"
      input: "output_layer/Softmax"
      input: "loss/output_layer_loss/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value/Minimum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Shape"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value/Minimum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Select"
      op: "Select"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/LessEqual"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value/Minimum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Select_1"
      op: "Select"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/LessEqual"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/zeros"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value_grad/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value/Minimum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Sum"
      op: "Sum"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Select"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value/Minimum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Reshape"
      op: "Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Sum"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value/Minimum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Sum_1"
      op: "Sum"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Select_1"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value/Minimum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Reshape_1"
      op: "Reshape"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Sum_1"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@loss/output_layer_loss/clip_by_value/Minimum"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/output_layer/Softmax_grad/mul"
      op: "Mul"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Reshape"
      input: "output_layer/Softmax"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/Softmax"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/output_layer/Softmax_grad/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/Softmax"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/output_layer/Softmax_grad/Sum"
      op: "Sum"
      input: "training/Adam/gradients/output_layer/Softmax_grad/mul"
      input: "training/Adam/gradients/output_layer/Softmax_grad/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/Softmax"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "training/Adam/gradients/output_layer/Softmax_grad/sub"
      op: "Sub"
      input: "training/Adam/gradients/loss/output_layer_loss/clip_by_value/Minimum_grad/Reshape"
      input: "training/Adam/gradients/output_layer/Softmax_grad/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/Softmax"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/output_layer/Softmax_grad/mul_1"
      op: "Mul"
      input: "training/Adam/gradients/output_layer/Softmax_grad/sub"
      input: "output_layer/Softmax"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/Softmax"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/output_layer/BiasAdd_grad/BiasAddGrad"
      op: "BiasAddGrad"
      input: "training/Adam/gradients/output_layer/Softmax_grad/mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/BiasAdd"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "training/Adam/gradients/output_layer/MatMul_grad/MatMul"
      op: "MatMul"
      input: "training/Adam/gradients/output_layer/Softmax_grad/mul_1"
      input: "output_layer/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "training/Adam/gradients/output_layer/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "dropout/cond/Merge"
      input: "training/Adam/gradients/output_layer/Softmax_grad/mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/Merge_grad/cond_grad"
      op: "Switch"
      input: "training/Adam/gradients/output_layer/MatMul_grad/MatMul"
      input: "dropout/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@output_layer/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Shape"
      op: "Shape"
      input: "dropout/cond/dropout/div"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Shape_1"
      op: "Shape"
      input: "dropout/cond/dropout/Floor"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/mul_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Shape"
      input: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Mul"
      op: "Mul"
      input: "training/Adam/gradients/dropout/cond/Merge_grad/cond_grad:1"
      input: "dropout/cond/dropout/Floor"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Sum"
      op: "Sum"
      input: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Mul"
      input: "training/Adam/gradients/dropout/cond/dropout/mul_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Reshape"
      op: "Reshape"
      input: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Sum"
      input: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Mul_1"
      op: "Mul"
      input: "dropout/cond/dropout/div"
      input: "training/Adam/gradients/dropout/cond/Merge_grad/cond_grad:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Sum_1"
      op: "Sum"
      input: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Mul_1"
      input: "training/Adam/gradients/dropout/cond/dropout/mul_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Reshape_1"
      op: "Reshape"
      input: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Sum_1"
      input: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/mul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/Switch"
      op: "Switch"
      input: "dense1/Relu"
      input: "dropout/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/Identity"
      op: "Identity"
      input: "training/Adam/gradients/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/Shape_1"
      op: "Shape"
      input: "training/Adam/gradients/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/zeros/Const"
      op: "Const"
      input: "^training/Adam/gradients/Identity"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/zeros"
      op: "Fill"
      input: "training/Adam/gradients/Shape_1"
      input: "training/Adam/gradients/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/Identity/Switch_grad/cond_grad"
      op: "Merge"
      input: "training/Adam/gradients/dropout/cond/Merge_grad/cond_grad"
      input: "training/Adam/gradients/zeros"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/div_grad/Shape"
      op: "Shape"
      input: "dropout/cond/dropout/Shape/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/div"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/div_grad/Shape_1"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/div"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/div_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/Shape"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/div"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/div_grad/RealDiv"
      op: "RealDiv"
      input: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Reshape"
      input: "dropout/cond/dropout/keep_prob"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/div"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/div_grad/Sum"
      op: "Sum"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/RealDiv"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/div"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/div_grad/Reshape"
      op: "Reshape"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/Sum"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/div"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/div_grad/Neg"
      op: "Neg"
      input: "dropout/cond/dropout/Shape/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/div"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/div_grad/RealDiv_1"
      op: "RealDiv"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/Neg"
      input: "dropout/cond/dropout/keep_prob"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/div"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/div_grad/RealDiv_2"
      op: "RealDiv"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/RealDiv_1"
      input: "dropout/cond/dropout/keep_prob"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/div"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/div_grad/mul"
      op: "Mul"
      input: "training/Adam/gradients/dropout/cond/dropout/mul_grad/Reshape"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/RealDiv_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/div"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/div_grad/Sum_1"
      op: "Sum"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/mul"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/div"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/div_grad/Reshape_1"
      op: "Reshape"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/Sum_1"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dropout/cond/dropout/div"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/Switch_1"
      op: "Switch"
      input: "dense1/Relu"
      input: "dropout/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/Identity_1"
      op: "Identity"
      input: "training/Adam/gradients/Switch_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/Shape_2"
      op: "Shape"
      input: "training/Adam/gradients/Switch_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/zeros_1/Const"
      op: "Const"
      input: "^training/Adam/gradients/Identity_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/zeros_1"
      op: "Fill"
      input: "training/Adam/gradients/Shape_2"
      input: "training/Adam/gradients/zeros_1/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/gradients/dropout/cond/dropout/Shape/Switch_grad/cond_grad"
      op: "Merge"
      input: "training/Adam/gradients/zeros_1"
      input: "training/Adam/gradients/dropout/cond/dropout/div_grad/Reshape"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/AddN"
      op: "AddN"
      input: "training/Adam/gradients/dropout/cond/Identity/Switch_grad/cond_grad"
      input: "training/Adam/gradients/dropout/cond/dropout/Shape/Switch_grad/cond_grad"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dense1/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "training/Adam/gradients/AddN"
      input: "dense1/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/Relu"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/gradients/dense1/BiasAdd_grad/BiasAddGrad"
      op: "BiasAddGrad"
      input: "training/Adam/gradients/dense1/Relu_grad/ReluGrad"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/BiasAdd"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "training/Adam/gradients/dense1/MatMul_grad/MatMul"
      op: "MatMul"
      input: "training/Adam/gradients/dense1/Relu_grad/ReluGrad"
      input: "dense1/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 784
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "training/Adam/gradients/dense1/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "flatten/Reshape"
      input: "training/Adam/gradients/dense1/Relu_grad/ReluGrad"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dense1/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "training/Adam/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node {
      name: "training/Adam/AssignAddVariableOp"
      op: "AssignAddVariableOp"
      input: "Adam/iterations"
      input: "training/Adam/Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "Adam/iterations"
      input: "^training/Adam/AssignAddVariableOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "training/Adam/Cast/ReadVariableOp"
      op: "ReadVariableOp"
      input: "Adam/iterations"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "training/Adam/Cast"
      op: "Cast"
      input: "training/Adam/Cast/ReadVariableOp"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/add/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "training/Adam/add"
      op: "Add"
      input: "training/Adam/Cast"
      input: "training/Adam/add/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Pow/ReadVariableOp"
      op: "ReadVariableOp"
      input: "Adam/beta_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Pow"
      op: "Pow"
      input: "training/Adam/Pow/ReadVariableOp"
      input: "training/Adam/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/sub/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "training/Adam/sub"
      op: "Sub"
      input: "training/Adam/sub/x"
      input: "training/Adam/Pow"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: inf
          }
        }
      }
    }
    node {
      name: "training/Adam/clip_by_value/Minimum"
      op: "Minimum"
      input: "training/Adam/sub"
      input: "training/Adam/Const_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/clip_by_value"
      op: "Maximum"
      input: "training/Adam/clip_by_value/Minimum"
      input: "training/Adam/Const_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Sqrt"
      op: "Sqrt"
      input: "training/Adam/clip_by_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Pow_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "Adam/beta_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Pow_1"
      op: "Pow"
      input: "training/Adam/Pow_1/ReadVariableOp"
      input: "training/Adam/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/sub_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "training/Adam/sub_1"
      op: "Sub"
      input: "training/Adam/sub_1/x"
      input: "training/Adam/Pow_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/truediv"
      op: "RealDiv"
      input: "training/Adam/Sqrt"
      input: "training/Adam/sub_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "Adam/lr"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul"
      op: "Mul"
      input: "training/Adam/ReadVariableOp_1"
      input: "training/Adam/truediv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\020\003\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros"
      op: "Fill"
      input: "training/Adam/zeros/shape_as_tensor"
      input: "training/Adam/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/Variable"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "training/Adam/Variable"
        }
      }
    }
    node {
      name: "training/Adam/Variable/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable/Assign"
      op: "AssignVariableOp"
      input: "training/Adam/Variable"
      input: "training/Adam/zeros"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Variable/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/zeros_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 512
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "training/Adam/Variable_1"
        }
      }
    }
    node {
      name: "training/Adam/Variable_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_1/Assign"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_1"
      input: "training/Adam/zeros_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_1"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Variable_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/zeros_2/shape_as_tensor"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\002\000\000\n\000\000\000"
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_2/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_2"
      op: "Fill"
      input: "training/Adam/zeros_2/shape_as_tensor"
      input: "training/Adam/zeros_2/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/Variable_2"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "training/Adam/Variable_2"
        }
      }
    }
    node {
      name: "training/Adam/Variable_2/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_2/Assign"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_2"
      input: "training/Adam/zeros_2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_2"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Variable_2/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/zeros_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 10
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_3"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "training/Adam/Variable_3"
        }
      }
    }
    node {
      name: "training/Adam/Variable_3/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_3"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_3/Assign"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_3"
      input: "training/Adam/zeros_3"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_3"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Variable_3/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_3"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/zeros_4/shape_as_tensor"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\020\003\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_4/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_4"
      op: "Fill"
      input: "training/Adam/zeros_4/shape_as_tensor"
      input: "training/Adam/zeros_4/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/Variable_4"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 784
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "training/Adam/Variable_4"
        }
      }
    }
    node {
      name: "training/Adam/Variable_4/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_4"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_4/Assign"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_4"
      input: "training/Adam/zeros_4"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_4"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Variable_4/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_4"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/zeros_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 512
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_5"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "training/Adam/Variable_5"
        }
      }
    }
    node {
      name: "training/Adam/Variable_5/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_5"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_5/Assign"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_5"
      input: "training/Adam/zeros_5"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_5"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Variable_5/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_5"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/zeros_6/shape_as_tensor"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\002\000\000\n\000\000\000"
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_6/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_6"
      op: "Fill"
      input: "training/Adam/zeros_6/shape_as_tensor"
      input: "training/Adam/zeros_6/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/Variable_6"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "training/Adam/Variable_6"
        }
      }
    }
    node {
      name: "training/Adam/Variable_6/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_6"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_6/Assign"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_6"
      input: "training/Adam/zeros_6"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_6"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Variable_6/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_6"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/zeros_7"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 10
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_7"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "training/Adam/Variable_7"
        }
      }
    }
    node {
      name: "training/Adam/Variable_7/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_7/Assign"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_7"
      input: "training/Adam/zeros_7"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_7"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Variable_7/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_7"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/zeros_8/shape_as_tensor"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_8/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_8"
      op: "Fill"
      input: "training/Adam/zeros_8/shape_as_tensor"
      input: "training/Adam/zeros_8/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/Variable_8"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "training/Adam/Variable_8"
        }
      }
    }
    node {
      name: "training/Adam/Variable_8/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_8"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_8/Assign"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_8"
      input: "training/Adam/zeros_8"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_8"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Variable_8/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_8"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/zeros_9/shape_as_tensor"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_9/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_9"
      op: "Fill"
      input: "training/Adam/zeros_9/shape_as_tensor"
      input: "training/Adam/zeros_9/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/Variable_9"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "training/Adam/Variable_9"
        }
      }
    }
    node {
      name: "training/Adam/Variable_9/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_9"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_9/Assign"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_9"
      input: "training/Adam/zeros_9"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_9"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Variable_9/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_9"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/zeros_10/shape_as_tensor"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_10/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_10"
      op: "Fill"
      input: "training/Adam/zeros_10/shape_as_tensor"
      input: "training/Adam/zeros_10/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/Variable_10"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "training/Adam/Variable_10"
        }
      }
    }
    node {
      name: "training/Adam/Variable_10/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_10"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_10/Assign"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_10"
      input: "training/Adam/zeros_10"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_10"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Variable_10/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_10"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/zeros_11/shape_as_tensor"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_11/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/zeros_11"
      op: "Fill"
      input: "training/Adam/zeros_11/shape_as_tensor"
      input: "training/Adam/zeros_11/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "training/Adam/Variable_11"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "training/Adam/Variable_11"
        }
      }
    }
    node {
      name: "training/Adam/Variable_11/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_11"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Variable_11/Assign"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_11"
      input: "training/Adam/zeros_11"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_11"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/Variable_11/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_11"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@training/Adam/Variable_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "Adam/beta_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_1"
      op: "Mul"
      input: "training/Adam/ReadVariableOp_2"
      input: "training/Adam/mul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "Adam/beta_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/sub_2/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "training/Adam/sub_2"
      op: "Sub"
      input: "training/Adam/sub_2/x"
      input: "training/Adam/ReadVariableOp_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/mul_2"
      op: "Mul"
      input: "training/Adam/sub_2"
      input: "training/Adam/gradients/dense1/MatMul_grad/MatMul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/add_1"
      op: "Add"
      input: "training/Adam/mul_1"
      input: "training/Adam/mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "Adam/beta_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_4"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_3"
      op: "Mul"
      input: "training/Adam/ReadVariableOp_4"
      input: "training/Adam/mul_3/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "Adam/beta_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/sub_3/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "training/Adam/sub_3"
      op: "Sub"
      input: "training/Adam/sub_3/x"
      input: "training/Adam/ReadVariableOp_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Square"
      op: "Square"
      input: "training/Adam/gradients/dense1/MatMul_grad/MatMul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/mul_4"
      op: "Mul"
      input: "training/Adam/sub_3"
      input: "training/Adam/Square"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/add_2"
      op: "Add"
      input: "training/Adam/mul_3"
      input: "training/Adam/mul_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/mul_5"
      op: "Mul"
      input: "training/Adam/mul"
      input: "training/Adam/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/Const_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: inf
          }
        }
      }
    }
    node {
      name: "training/Adam/clip_by_value_1/Minimum"
      op: "Minimum"
      input: "training/Adam/add_2"
      input: "training/Adam/Const_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/clip_by_value_1"
      op: "Maximum"
      input: "training/Adam/clip_by_value_1/Minimum"
      input: "training/Adam/Const_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Sqrt_1"
      op: "Sqrt"
      input: "training/Adam/clip_by_value_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/add_3/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0000000116860974e-07
          }
        }
      }
    }
    node {
      name: "training/Adam/add_3"
      op: "Add"
      input: "training/Adam/Sqrt_1"
      input: "training/Adam/add_3/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/truediv_1"
      op: "RealDiv"
      input: "training/Adam/mul_5"
      input: "training/Adam/add_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "dense1/kernel"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/sub_4"
      op: "Sub"
      input: "training/Adam/ReadVariableOp_6"
      input: "training/Adam/truediv_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/AssignVariableOp"
      op: "AssignVariableOp"
      input: "training/Adam/Variable"
      input: "training/Adam/add_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "training/Adam/Variable"
      input: "^training/Adam/AssignVariableOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_4"
      input: "training/Adam/add_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_8"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_4"
      input: "^training/Adam/AssignVariableOp_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "dense1/kernel"
      input: "training/Adam/sub_4"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_9"
      op: "ReadVariableOp"
      input: "dense1/kernel"
      input: "^training/Adam/AssignVariableOp_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 784
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_10"
      op: "ReadVariableOp"
      input: "Adam/beta_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_6/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_6"
      op: "Mul"
      input: "training/Adam/ReadVariableOp_10"
      input: "training/Adam/mul_6/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_11"
      op: "ReadVariableOp"
      input: "Adam/beta_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/sub_5/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "training/Adam/sub_5"
      op: "Sub"
      input: "training/Adam/sub_5/x"
      input: "training/Adam/ReadVariableOp_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/mul_7"
      op: "Mul"
      input: "training/Adam/sub_5"
      input: "training/Adam/gradients/dense1/BiasAdd_grad/BiasAddGrad"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/add_4"
      op: "Add"
      input: "training/Adam/mul_6"
      input: "training/Adam/mul_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_12"
      op: "ReadVariableOp"
      input: "Adam/beta_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_8/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_5"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_8"
      op: "Mul"
      input: "training/Adam/ReadVariableOp_12"
      input: "training/Adam/mul_8/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_13"
      op: "ReadVariableOp"
      input: "Adam/beta_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/sub_6/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "training/Adam/sub_6"
      op: "Sub"
      input: "training/Adam/sub_6/x"
      input: "training/Adam/ReadVariableOp_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Square_1"
      op: "Square"
      input: "training/Adam/gradients/dense1/BiasAdd_grad/BiasAddGrad"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/mul_9"
      op: "Mul"
      input: "training/Adam/sub_6"
      input: "training/Adam/Square_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/add_5"
      op: "Add"
      input: "training/Adam/mul_8"
      input: "training/Adam/mul_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/mul_10"
      op: "Mul"
      input: "training/Adam/mul"
      input: "training/Adam/add_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Const_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/Const_6"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: inf
          }
        }
      }
    }
    node {
      name: "training/Adam/clip_by_value_2/Minimum"
      op: "Minimum"
      input: "training/Adam/add_5"
      input: "training/Adam/Const_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/clip_by_value_2"
      op: "Maximum"
      input: "training/Adam/clip_by_value_2/Minimum"
      input: "training/Adam/Const_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Sqrt_2"
      op: "Sqrt"
      input: "training/Adam/clip_by_value_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/add_6/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0000000116860974e-07
          }
        }
      }
    }
    node {
      name: "training/Adam/add_6"
      op: "Add"
      input: "training/Adam/Sqrt_2"
      input: "training/Adam/add_6/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/truediv_2"
      op: "RealDiv"
      input: "training/Adam/mul_10"
      input: "training/Adam/add_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_14"
      op: "ReadVariableOp"
      input: "dense1/bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/sub_7"
      op: "Sub"
      input: "training/Adam/ReadVariableOp_14"
      input: "training/Adam/truediv_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_1"
      input: "training/Adam/add_4"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_15"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_1"
      input: "^training/Adam/AssignVariableOp_3"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_5"
      input: "training/Adam/add_5"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_16"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_5"
      input: "^training/Adam/AssignVariableOp_4"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "dense1/bias"
      input: "training/Adam/sub_7"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_17"
      op: "ReadVariableOp"
      input: "dense1/bias"
      input: "^training/Adam/AssignVariableOp_5"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_18"
      op: "ReadVariableOp"
      input: "Adam/beta_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_11/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_11"
      op: "Mul"
      input: "training/Adam/ReadVariableOp_18"
      input: "training/Adam/mul_11/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_19"
      op: "ReadVariableOp"
      input: "Adam/beta_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/sub_8/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "training/Adam/sub_8"
      op: "Sub"
      input: "training/Adam/sub_8/x"
      input: "training/Adam/ReadVariableOp_19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/mul_12"
      op: "Mul"
      input: "training/Adam/sub_8"
      input: "training/Adam/gradients/output_layer/MatMul_grad/MatMul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/add_7"
      op: "Add"
      input: "training/Adam/mul_11"
      input: "training/Adam/mul_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_20"
      op: "ReadVariableOp"
      input: "Adam/beta_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_13/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_6"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_13"
      op: "Mul"
      input: "training/Adam/ReadVariableOp_20"
      input: "training/Adam/mul_13/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_21"
      op: "ReadVariableOp"
      input: "Adam/beta_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/sub_9/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "training/Adam/sub_9"
      op: "Sub"
      input: "training/Adam/sub_9/x"
      input: "training/Adam/ReadVariableOp_21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Square_2"
      op: "Square"
      input: "training/Adam/gradients/output_layer/MatMul_grad/MatMul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/mul_14"
      op: "Mul"
      input: "training/Adam/sub_9"
      input: "training/Adam/Square_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/add_8"
      op: "Add"
      input: "training/Adam/mul_13"
      input: "training/Adam/mul_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/mul_15"
      op: "Mul"
      input: "training/Adam/mul"
      input: "training/Adam/add_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Const_7"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/Const_8"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: inf
          }
        }
      }
    }
    node {
      name: "training/Adam/clip_by_value_3/Minimum"
      op: "Minimum"
      input: "training/Adam/add_8"
      input: "training/Adam/Const_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/clip_by_value_3"
      op: "Maximum"
      input: "training/Adam/clip_by_value_3/Minimum"
      input: "training/Adam/Const_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Sqrt_3"
      op: "Sqrt"
      input: "training/Adam/clip_by_value_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/add_9/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0000000116860974e-07
          }
        }
      }
    }
    node {
      name: "training/Adam/add_9"
      op: "Add"
      input: "training/Adam/Sqrt_3"
      input: "training/Adam/add_9/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/truediv_3"
      op: "RealDiv"
      input: "training/Adam/mul_15"
      input: "training/Adam/add_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_22"
      op: "ReadVariableOp"
      input: "output_layer/kernel"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/sub_10"
      op: "Sub"
      input: "training/Adam/ReadVariableOp_22"
      input: "training/Adam/truediv_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_2"
      input: "training/Adam/add_7"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_23"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_2"
      input: "^training/Adam/AssignVariableOp_6"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_6"
      input: "training/Adam/add_8"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_24"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_6"
      input: "^training/Adam/AssignVariableOp_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/AssignVariableOp_8"
      op: "AssignVariableOp"
      input: "output_layer/kernel"
      input: "training/Adam/sub_10"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_25"
      op: "ReadVariableOp"
      input: "output_layer/kernel"
      input: "^training/Adam/AssignVariableOp_8"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_26"
      op: "ReadVariableOp"
      input: "Adam/beta_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_16/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_3"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_16"
      op: "Mul"
      input: "training/Adam/ReadVariableOp_26"
      input: "training/Adam/mul_16/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_27"
      op: "ReadVariableOp"
      input: "Adam/beta_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/sub_11/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "training/Adam/sub_11"
      op: "Sub"
      input: "training/Adam/sub_11/x"
      input: "training/Adam/ReadVariableOp_27"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/mul_17"
      op: "Mul"
      input: "training/Adam/sub_11"
      input: "training/Adam/gradients/output_layer/BiasAdd_grad/BiasAddGrad"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/add_10"
      op: "Add"
      input: "training/Adam/mul_16"
      input: "training/Adam/mul_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_28"
      op: "ReadVariableOp"
      input: "Adam/beta_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_18/ReadVariableOp"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/mul_18"
      op: "Mul"
      input: "training/Adam/ReadVariableOp_28"
      input: "training/Adam/mul_18/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_29"
      op: "ReadVariableOp"
      input: "Adam/beta_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/sub_12/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "training/Adam/sub_12"
      op: "Sub"
      input: "training/Adam/sub_12/x"
      input: "training/Adam/ReadVariableOp_29"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Square_3"
      op: "Square"
      input: "training/Adam/gradients/output_layer/BiasAdd_grad/BiasAddGrad"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/mul_19"
      op: "Mul"
      input: "training/Adam/sub_12"
      input: "training/Adam/Square_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/add_11"
      op: "Add"
      input: "training/Adam/mul_18"
      input: "training/Adam/mul_19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/mul_20"
      op: "Mul"
      input: "training/Adam/mul"
      input: "training/Adam/add_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Const_9"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "training/Adam/Const_10"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: inf
          }
        }
      }
    }
    node {
      name: "training/Adam/clip_by_value_4/Minimum"
      op: "Minimum"
      input: "training/Adam/add_11"
      input: "training/Adam/Const_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/clip_by_value_4"
      op: "Maximum"
      input: "training/Adam/clip_by_value_4/Minimum"
      input: "training/Adam/Const_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/Sqrt_4"
      op: "Sqrt"
      input: "training/Adam/clip_by_value_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/add_12/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0000000116860974e-07
          }
        }
      }
    }
    node {
      name: "training/Adam/add_12"
      op: "Add"
      input: "training/Adam/Sqrt_4"
      input: "training/Adam/add_12/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/truediv_4"
      op: "RealDiv"
      input: "training/Adam/mul_20"
      input: "training/Adam/add_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_30"
      op: "ReadVariableOp"
      input: "output_layer/bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/sub_13"
      op: "Sub"
      input: "training/Adam/ReadVariableOp_30"
      input: "training/Adam/truediv_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "training/Adam/AssignVariableOp_9"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_3"
      input: "training/Adam/add_10"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_31"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_3"
      input: "^training/Adam/AssignVariableOp_9"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/AssignVariableOp_10"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_7"
      input: "training/Adam/add_11"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_32"
      op: "ReadVariableOp"
      input: "training/Adam/Variable_7"
      input: "^training/Adam/AssignVariableOp_10"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/AssignVariableOp_11"
      op: "AssignVariableOp"
      input: "output_layer/bias"
      input: "training/Adam/sub_13"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/Adam/ReadVariableOp_33"
      op: "ReadVariableOp"
      input: "output_layer/bias"
      input: "^training/Adam/AssignVariableOp_11"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "training/group_deps"
      op: "NoOp"
      input: "^loss/mul"
      input: "^metrics/acc/Mean"
      input: "^training/Adam/ReadVariableOp"
      input: "^training/Adam/ReadVariableOp_15"
      input: "^training/Adam/ReadVariableOp_16"
      input: "^training/Adam/ReadVariableOp_17"
      input: "^training/Adam/ReadVariableOp_23"
      input: "^training/Adam/ReadVariableOp_24"
      input: "^training/Adam/ReadVariableOp_25"
      input: "^training/Adam/ReadVariableOp_31"
      input: "^training/Adam/ReadVariableOp_32"
      input: "^training/Adam/ReadVariableOp_33"
      input: "^training/Adam/ReadVariableOp_7"
      input: "^training/Adam/ReadVariableOp_8"
      input: "^training/Adam/ReadVariableOp_9"
    }
    node {
      name: "VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_4"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_1"
      op: "VarIsInitializedOp"
      input: "dense1/kernel"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_2"
      op: "VarIsInitializedOp"
      input: "Adam/iterations"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_3"
      op: "VarIsInitializedOp"
      input: "Adam/beta_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_4"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_8"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_5"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_6"
      op: "VarIsInitializedOp"
      input: "output_layer/kernel"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_7"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_8"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_3"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_9"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_10"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_10"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_11"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_12"
      op: "VarIsInitializedOp"
      input: "Adam/lr"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_13"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_9"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_14"
      op: "VarIsInitializedOp"
      input: "Adam/beta_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_15"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_5"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_16"
      op: "VarIsInitializedOp"
      input: "Adam/decay"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_17"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_6"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_18"
      op: "VarIsInitializedOp"
      input: "output_layer/bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_19"
      op: "VarIsInitializedOp"
      input: "training/Adam/Variable_11"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "VarIsInitializedOp_20"
      op: "VarIsInitializedOp"
      input: "dense1/bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "init"
      op: "NoOp"
      input: "^Adam/beta_1/Assign"
      input: "^Adam/beta_2/Assign"
      input: "^Adam/decay/Assign"
      input: "^Adam/iterations/Assign"
      input: "^Adam/lr/Assign"
      input: "^dense1/bias/Assign"
      input: "^dense1/kernel/Assign"
      input: "^output_layer/bias/Assign"
      input: "^output_layer/kernel/Assign"
      input: "^training/Adam/Variable/Assign"
      input: "^training/Adam/Variable_1/Assign"
      input: "^training/Adam/Variable_10/Assign"
      input: "^training/Adam/Variable_11/Assign"
      input: "^training/Adam/Variable_2/Assign"
      input: "^training/Adam/Variable_3/Assign"
      input: "^training/Adam/Variable_4/Assign"
      input: "^training/Adam/Variable_5/Assign"
      input: "^training/Adam/Variable_6/Assign"
      input: "^training/Adam/Variable_7/Assign"
      input: "^training/Adam/Variable_8/Assign"
      input: "^training/Adam/Variable_9/Assign"
    }
    node {
      name: "group_deps"
      op: "NoOp"
      input: "^loss/mul"
      input: "^metrics/acc/Mean"
    }
    node {
      name: "save/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/StringJoin/inputs_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_f3aa863bbefd4690aee4116608a8cf3e/part"
          }
        }
      }
    }
    node {
      name: "save/StringJoin"
      op: "StringJoin"
      input: "save/Const"
      input: "save/StringJoin/inputs_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename"
      op: "ShardedFilename"
      input: "save/StringJoin"
      input: "save/ShardedFilename/shard"
      input: "save/num_shards"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 21
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 21
              }
            }
            string_val: "Adam/beta_1"
            string_val: "Adam/beta_2"
            string_val: "Adam/decay"
            string_val: "Adam/iterations"
            string_val: "Adam/lr"
            string_val: "dense1/bias"
            string_val: "dense1/kernel"
            string_val: "output_layer/bias"
            string_val: "output_layer/kernel"
            string_val: "training/Adam/Variable"
            string_val: "training/Adam/Variable_1"
            string_val: "training/Adam/Variable_10"
            string_val: "training/Adam/Variable_11"
            string_val: "training/Adam/Variable_2"
            string_val: "training/Adam/Variable_3"
            string_val: "training/Adam/Variable_4"
            string_val: "training/Adam/Variable_5"
            string_val: "training/Adam/Variable_6"
            string_val: "training/Adam/Variable_7"
            string_val: "training/Adam/Variable_8"
            string_val: "training/Adam/Variable_9"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 21
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 21
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/ShardedFilename"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "Adam/beta_1/Read/ReadVariableOp"
      input: "Adam/beta_2/Read/ReadVariableOp"
      input: "Adam/decay/Read/ReadVariableOp"
      input: "Adam/iterations/Read/ReadVariableOp"
      input: "Adam/lr/Read/ReadVariableOp"
      input: "dense1/bias/Read/ReadVariableOp"
      input: "dense1/kernel/Read/ReadVariableOp"
      input: "output_layer/bias/Read/ReadVariableOp"
      input: "output_layer/kernel/Read/ReadVariableOp"
      input: "training/Adam/Variable/Read/ReadVariableOp"
      input: "training/Adam/Variable_1/Read/ReadVariableOp"
      input: "training/Adam/Variable_10/Read/ReadVariableOp"
      input: "training/Adam/Variable_11/Read/ReadVariableOp"
      input: "training/Adam/Variable_2/Read/ReadVariableOp"
      input: "training/Adam/Variable_3/Read/ReadVariableOp"
      input: "training/Adam/Variable_4/Read/ReadVariableOp"
      input: "training/Adam/Variable_5/Read/ReadVariableOp"
      input: "training/Adam/Variable_6/Read/ReadVariableOp"
      input: "training/Adam/Variable_7/Read/ReadVariableOp"
      input: "training/Adam/Variable_8/Read/ReadVariableOp"
      input: "training/Adam/Variable_9/Read/ReadVariableOp"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/ShardedFilename"
      input: "^save/SaveV2"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save/ShardedFilename"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save/Const"
      device: "/device:CPU:0"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Identity"
      op: "Identity"
      input: "save/Const"
      input: "^save/MergeV2Checkpoints"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 21
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 21
              }
            }
            string_val: "Adam/beta_1"
            string_val: "Adam/beta_2"
            string_val: "Adam/decay"
            string_val: "Adam/iterations"
            string_val: "Adam/lr"
            string_val: "dense1/bias"
            string_val: "dense1/kernel"
            string_val: "output_layer/bias"
            string_val: "output_layer/kernel"
            string_val: "training/Adam/Variable"
            string_val: "training/Adam/Variable_1"
            string_val: "training/Adam/Variable_10"
            string_val: "training/Adam/Variable_11"
            string_val: "training/Adam/Variable_2"
            string_val: "training/Adam/Variable_3"
            string_val: "training/Adam/Variable_4"
            string_val: "training/Adam/Variable_5"
            string_val: "training/Adam/Variable_6"
            string_val: "training/Adam/Variable_7"
            string_val: "training/Adam/Variable_8"
            string_val: "training/Adam/Variable_9"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 21
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 21
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Identity_1"
      op: "Identity"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp"
      op: "AssignVariableOp"
      input: "Adam/beta_1"
      input: "save/Identity_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_2"
      op: "Identity"
      input: "save/RestoreV2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "Adam/beta_2"
      input: "save/Identity_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_3"
      op: "Identity"
      input: "save/RestoreV2:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "Adam/decay"
      input: "save/Identity_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_4"
      op: "Identity"
      input: "save/RestoreV2:3"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "Adam/iterations"
      input: "save/Identity_4"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "save/Identity_5"
      op: "Identity"
      input: "save/RestoreV2:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "Adam/lr"
      input: "save/Identity_5"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_6"
      op: "Identity"
      input: "save/RestoreV2:5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "dense1/bias"
      input: "save/Identity_6"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_7"
      op: "Identity"
      input: "save/RestoreV2:6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "dense1/kernel"
      input: "save/Identity_7"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_8"
      op: "Identity"
      input: "save/RestoreV2:7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "output_layer/bias"
      input: "save/Identity_8"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_9"
      op: "Identity"
      input: "save/RestoreV2:8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_8"
      op: "AssignVariableOp"
      input: "output_layer/kernel"
      input: "save/Identity_9"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_10"
      op: "Identity"
      input: "save/RestoreV2:9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_9"
      op: "AssignVariableOp"
      input: "training/Adam/Variable"
      input: "save/Identity_10"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_11"
      op: "Identity"
      input: "save/RestoreV2:10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_10"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_1"
      input: "save/Identity_11"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_12"
      op: "Identity"
      input: "save/RestoreV2:11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_11"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_10"
      input: "save/Identity_12"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_13"
      op: "Identity"
      input: "save/RestoreV2:12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_12"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_11"
      input: "save/Identity_13"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_14"
      op: "Identity"
      input: "save/RestoreV2:13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_13"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_2"
      input: "save/Identity_14"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_15"
      op: "Identity"
      input: "save/RestoreV2:14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_14"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_3"
      input: "save/Identity_15"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_16"
      op: "Identity"
      input: "save/RestoreV2:15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_15"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_4"
      input: "save/Identity_16"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_17"
      op: "Identity"
      input: "save/RestoreV2:16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_16"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_5"
      input: "save/Identity_17"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_18"
      op: "Identity"
      input: "save/RestoreV2:17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_17"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_6"
      input: "save/Identity_18"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_19"
      op: "Identity"
      input: "save/RestoreV2:18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_18"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_7"
      input: "save/Identity_19"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_20"
      op: "Identity"
      input: "save/RestoreV2:19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_19"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_8"
      input: "save/Identity_20"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_21"
      op: "Identity"
      input: "save/RestoreV2:20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_20"
      op: "AssignVariableOp"
      input: "training/Adam/Variable_9"
      input: "save/Identity_21"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/restore_shard"
      op: "NoOp"
      input: "^save/AssignVariableOp"
      input: "^save/AssignVariableOp_1"
      input: "^save/AssignVariableOp_10"
      input: "^save/AssignVariableOp_11"
      input: "^save/AssignVariableOp_12"
      input: "^save/AssignVariableOp_13"
      input: "^save/AssignVariableOp_14"
      input: "^save/AssignVariableOp_15"
      input: "^save/AssignVariableOp_16"
      input: "^save/AssignVariableOp_17"
      input: "^save/AssignVariableOp_18"
      input: "^save/AssignVariableOp_19"
      input: "^save/AssignVariableOp_2"
      input: "^save/AssignVariableOp_20"
      input: "^save/AssignVariableOp_3"
      input: "^save/AssignVariableOp_4"
      input: "^save/AssignVariableOp_5"
      input: "^save/AssignVariableOp_6"
      input: "^save/AssignVariableOp_7"
      input: "^save/AssignVariableOp_8"
      input: "^save/AssignVariableOp_9"
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/restore_shard"
    }
    versions {
      producer: 27
    }
  }
  saver_def {
    filename_tensor_name: "save/Const:0"
    save_tensor_name: "save/Identity:0"
    restore_op_name: "save/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "cond_context"
    value {
      bytes_list {
        value: "\n\026dropout/cond/cond_text\022\026dropout/cond/pred_id:0\032\027dropout/cond/switch_t:0 \001*\207\005\n\rdense1/Relu:0\n\034dropout/cond/dropout/Floor:0\n#dropout/cond/dropout/Shape/Switch:1\n\034dropout/cond/dropout/Shape:0\n\032dropout/cond/dropout/add:0\n\032dropout/cond/dropout/div:0\n dropout/cond/dropout/keep_prob:0\n\032dropout/cond/dropout/mul:0\n3dropout/cond/dropout/random_uniform/RandomUniform:0\n)dropout/cond/dropout/random_uniform/max:0\n)dropout/cond/dropout/random_uniform/min:0\n)dropout/cond/dropout/random_uniform/mul:0\n)dropout/cond/dropout/random_uniform/sub:0\n%dropout/cond/dropout/random_uniform:0\n\026dropout/cond/pred_id:0\n\027dropout/cond/switch_t:0\0220\n\026dropout/cond/pred_id:0\022\026dropout/cond/pred_id:0\0224\n\rdense1/Relu:0\022#dropout/cond/dropout/Shape/Switch:1"
        value: "\n\030dropout/cond/cond_text_1\022\026dropout/cond/pred_id:0\032\027dropout/cond/switch_f:0*\334\001\n\rdense1/Relu:0\n\036dropout/cond/Identity/Switch:0\n\027dropout/cond/Identity:0\n\026dropout/cond/pred_id:0\n\027dropout/cond/switch_f:0\0220\n\026dropout/cond/pred_id:0\022\026dropout/cond/pred_id:0\022/\n\rdense1/Relu:0\022\036dropout/cond/Identity/Switch:0"
        value: "\nVloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/cond_text\022Vloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id:0\032Wloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/switch_t:0 \001*\210\006\nIloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar:0\nWloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1:0\nWloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1:1\nVloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id:0\nWloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/switch_t:0\022\244\001\nIloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar:0\022Wloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1:1\022\260\001\nVloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id:0\022Vloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id:0"
        value: "\nXloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/cond_text_1\022Vloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id:0\032Wloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/switch_f:0*\244)\nnloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge:0\nnloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge:1\noloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch:0\noloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch:1\nqloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1:0\nqloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1:1\n\222\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:0\n\222\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:1\n\222\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:2\n\213\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch:0\n\210\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:0\n\204\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:0\n\215\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch:0\n\212\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:0\n\206\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:0\n\205\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis:0\n\200\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat:0\n\212\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:0\n\211\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:0\n\211\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:0\n\203\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like:0\n{loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x:0\nyloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims:0\n|loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch:0\n~loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1:0\nuloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank:0\nploss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id:0\nqloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_f:0\nqloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t:0\nVloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id:0\nWloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/switch_f:0\nKloss/output_layer_loss/broadcast_weights/assert_broadcastable/values/rank:0\nLloss/output_layer_loss/broadcast_weights/assert_broadcastable/values/shape:0\nLloss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/rank:0\nMloss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/shape:0\022\260\001\nVloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id:0\022Vloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id:0\022\334\001\nLloss/output_layer_loss/broadcast_weights/assert_broadcastable/values/shape:0\022\213\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch:0\022\316\001\nLloss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/rank:0\022~loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1:0\022\337\001\nMloss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/shape:0\022\215\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch:0\022\313\001\nKloss/output_layer_loss/broadcast_weights/assert_broadcastable/values/rank:0\022|loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch:02\244$\n\241$\nploss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/cond_text\022ploss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id:0\032qloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t:0 \001*\305!\n\222\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:0\n\222\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:1\n\222\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:2\n\213\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch:0\n\215\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1:1\n\210\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:0\n\204\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:0\n\215\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch:0\n\217\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1:1\n\212\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:0\n\206\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:0\n\205\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis:0\n\200\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat:0\n\212\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:0\n\211\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:0\n\211\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:0\n\203\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like:0\n{loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x:0\nyloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims:0\nploss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id:0\nqloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t:0\nLloss/output_layer_loss/broadcast_weights/assert_broadcastable/values/shape:0\nMloss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/shape:0\022\341\001\nMloss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/shape:0\022\217\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1:1\022\240\002\n\215\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch:0\022\215\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch:0\022\344\001\nploss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id:0\022ploss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id:0\022\234\002\n\213\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch:0\022\213\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch:0\022\336\001\nLloss/output_layer_loss/broadcast_weights/assert_broadcastable/values/shape:0\022\215\001loss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1:12\365\n\n\362\n\nrloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/cond_text_1\022ploss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id:0\032qloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_f:0*\226\010\nqloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1:0\nqloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1:1\nuloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank:0\nploss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id:0\nqloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_f:0\022\344\001\nploss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id:0\022ploss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id:0\022\352\001\nuloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank:0\022qloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1:0"
        value: "\nSloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/cond_text\022Sloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/pred_id:0\032Tloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_t:0 \001*\270\003\n^loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency:0\nSloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/pred_id:0\nTloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_t:0\022\252\001\nSloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/pred_id:0\022Sloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/pred_id:0"
        value: "\nUloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/cond_text_1\022Sloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/pred_id:0\032Tloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_f:0*\310\022\nYloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch:0\n[loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1:0\n[loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2:0\n[loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3:0\nYloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_0:0\nYloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_1:0\nYloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_2:0\nYloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_4:0\nYloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_5:0\nYloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_7:0\n`loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency_1:0\nSloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/pred_id:0\nTloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/switch_f:0\nIloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar:0\nTloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Merge:0\nLloss/output_layer_loss/broadcast_weights/assert_broadcastable/values/shape:0\nMloss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/shape:0\022\253\001\nLloss/output_layer_loss/broadcast_weights/assert_broadcastable/values/shape:0\022[loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2:0\022\261\001\nTloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_valid_shape/Merge:0\022Yloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch:0\022\254\001\nMloss/output_layer_loss/broadcast_weights/assert_broadcastable/weights/shape:0\022[loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1:0\022\252\001\nSloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/pred_id:0\022Sloss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/pred_id:0\022\250\001\nIloss/output_layer_loss/broadcast_weights/assert_broadcastable/is_scalar:0\022[loss/output_layer_loss/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3:0"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n\017dense1/kernel:0\022\024dense1/kernel/Assign\032#dense1/kernel/Read/ReadVariableOp:0(\0012*dense1/kernel/Initializer/random_uniform:08\001"
        value: "\n\rdense1/bias:0\022\022dense1/bias/Assign\032!dense1/bias/Read/ReadVariableOp:0(\0012\037dense1/bias/Initializer/zeros:08\001"
        value: "\n\025output_layer/kernel:0\022\032output_layer/kernel/Assign\032)output_layer/kernel/Read/ReadVariableOp:0(\00120output_layer/kernel/Initializer/random_uniform:08\001"
        value: "\n\023output_layer/bias:0\022\030output_layer/bias/Assign\032\'output_layer/bias/Read/ReadVariableOp:0(\0012%output_layer/bias/Initializer/zeros:08\001"
        value: "\n\021Adam/iterations:0\022\026Adam/iterations/Assign\032%Adam/iterations/Read/ReadVariableOp:0(\0012+Adam/iterations/Initializer/initial_value:08\001"
        value: "\n\tAdam/lr:0\022\016Adam/lr/Assign\032\035Adam/lr/Read/ReadVariableOp:0(\0012#Adam/lr/Initializer/initial_value:08\001"
        value: "\n\rAdam/beta_1:0\022\022Adam/beta_1/Assign\032!Adam/beta_1/Read/ReadVariableOp:0(\0012\'Adam/beta_1/Initializer/initial_value:08\001"
        value: "\n\rAdam/beta_2:0\022\022Adam/beta_2/Assign\032!Adam/beta_2/Read/ReadVariableOp:0(\0012\'Adam/beta_2/Initializer/initial_value:08\001"
        value: "\n\014Adam/decay:0\022\021Adam/decay/Assign\032 Adam/decay/Read/ReadVariableOp:0(\0012&Adam/decay/Initializer/initial_value:08\001"
        value: "\n\030training/Adam/Variable:0\022\035training/Adam/Variable/Assign\032,training/Adam/Variable/Read/ReadVariableOp:0(\0012\025training/Adam/zeros:08\001"
        value: "\n\032training/Adam/Variable_1:0\022\037training/Adam/Variable_1/Assign\032.training/Adam/Variable_1/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_1:08\001"
        value: "\n\032training/Adam/Variable_2:0\022\037training/Adam/Variable_2/Assign\032.training/Adam/Variable_2/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_2:08\001"
        value: "\n\032training/Adam/Variable_3:0\022\037training/Adam/Variable_3/Assign\032.training/Adam/Variable_3/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_3:08\001"
        value: "\n\032training/Adam/Variable_4:0\022\037training/Adam/Variable_4/Assign\032.training/Adam/Variable_4/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_4:08\001"
        value: "\n\032training/Adam/Variable_5:0\022\037training/Adam/Variable_5/Assign\032.training/Adam/Variable_5/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_5:08\001"
        value: "\n\032training/Adam/Variable_6:0\022\037training/Adam/Variable_6/Assign\032.training/Adam/Variable_6/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_6:08\001"
        value: "\n\032training/Adam/Variable_7:0\022\037training/Adam/Variable_7/Assign\032.training/Adam/Variable_7/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_7:08\001"
        value: "\n\032training/Adam/Variable_8:0\022\037training/Adam/Variable_8/Assign\032.training/Adam/Variable_8/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_8:08\001"
        value: "\n\032training/Adam/Variable_9:0\022\037training/Adam/Variable_9/Assign\032.training/Adam/Variable_9/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_9:08\001"
        value: "\n\033training/Adam/Variable_10:0\022 training/Adam/Variable_10/Assign\032/training/Adam/Variable_10/Read/ReadVariableOp:0(\0012\030training/Adam/zeros_10:08\001"
        value: "\n\033training/Adam/Variable_11:0\022 training/Adam/Variable_11/Assign\032/training/Adam/Variable_11/Read/ReadVariableOp:0(\0012\030training/Adam/zeros_11:08\001"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\017dense1/kernel:0\022\024dense1/kernel/Assign\032#dense1/kernel/Read/ReadVariableOp:0(\0012*dense1/kernel/Initializer/random_uniform:08\001"
        value: "\n\rdense1/bias:0\022\022dense1/bias/Assign\032!dense1/bias/Read/ReadVariableOp:0(\0012\037dense1/bias/Initializer/zeros:08\001"
        value: "\n\025output_layer/kernel:0\022\032output_layer/kernel/Assign\032)output_layer/kernel/Read/ReadVariableOp:0(\00120output_layer/kernel/Initializer/random_uniform:08\001"
        value: "\n\023output_layer/bias:0\022\030output_layer/bias/Assign\032\'output_layer/bias/Read/ReadVariableOp:0(\0012%output_layer/bias/Initializer/zeros:08\001"
        value: "\n\021Adam/iterations:0\022\026Adam/iterations/Assign\032%Adam/iterations/Read/ReadVariableOp:0(\0012+Adam/iterations/Initializer/initial_value:08\001"
        value: "\n\tAdam/lr:0\022\016Adam/lr/Assign\032\035Adam/lr/Read/ReadVariableOp:0(\0012#Adam/lr/Initializer/initial_value:08\001"
        value: "\n\rAdam/beta_1:0\022\022Adam/beta_1/Assign\032!Adam/beta_1/Read/ReadVariableOp:0(\0012\'Adam/beta_1/Initializer/initial_value:08\001"
        value: "\n\rAdam/beta_2:0\022\022Adam/beta_2/Assign\032!Adam/beta_2/Read/ReadVariableOp:0(\0012\'Adam/beta_2/Initializer/initial_value:08\001"
        value: "\n\014Adam/decay:0\022\021Adam/decay/Assign\032 Adam/decay/Read/ReadVariableOp:0(\0012&Adam/decay/Initializer/initial_value:08\001"
        value: "\n\030training/Adam/Variable:0\022\035training/Adam/Variable/Assign\032,training/Adam/Variable/Read/ReadVariableOp:0(\0012\025training/Adam/zeros:08\001"
        value: "\n\032training/Adam/Variable_1:0\022\037training/Adam/Variable_1/Assign\032.training/Adam/Variable_1/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_1:08\001"
        value: "\n\032training/Adam/Variable_2:0\022\037training/Adam/Variable_2/Assign\032.training/Adam/Variable_2/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_2:08\001"
        value: "\n\032training/Adam/Variable_3:0\022\037training/Adam/Variable_3/Assign\032.training/Adam/Variable_3/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_3:08\001"
        value: "\n\032training/Adam/Variable_4:0\022\037training/Adam/Variable_4/Assign\032.training/Adam/Variable_4/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_4:08\001"
        value: "\n\032training/Adam/Variable_5:0\022\037training/Adam/Variable_5/Assign\032.training/Adam/Variable_5/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_5:08\001"
        value: "\n\032training/Adam/Variable_6:0\022\037training/Adam/Variable_6/Assign\032.training/Adam/Variable_6/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_6:08\001"
        value: "\n\032training/Adam/Variable_7:0\022\037training/Adam/Variable_7/Assign\032.training/Adam/Variable_7/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_7:08\001"
        value: "\n\032training/Adam/Variable_8:0\022\037training/Adam/Variable_8/Assign\032.training/Adam/Variable_8/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_8:08\001"
        value: "\n\032training/Adam/Variable_9:0\022\037training/Adam/Variable_9/Assign\032.training/Adam/Variable_9/Read/ReadVariableOp:0(\0012\027training/Adam/zeros_9:08\001"
        value: "\n\033training/Adam/Variable_10:0\022 training/Adam/Variable_10/Assign\032/training/Adam/Variable_10/Read/ReadVariableOp:0(\0012\030training/Adam/zeros_10:08\001"
        value: "\n\033training/Adam/Variable_11:0\022 training/Adam/Variable_11/Assign\032/training/Adam/Variable_11/Read/ReadVariableOp:0(\0012\030training/Adam/zeros_11:08\001"
      }
    }
  }
}
